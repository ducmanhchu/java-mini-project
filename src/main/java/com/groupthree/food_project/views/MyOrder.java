/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.groupthree.food_project.views;

import com.groupthree.food_project.dao.OrderDetailDAO;
import com.groupthree.food_project.dao.UsersDAO;
import com.groupthree.food_project.models.OrderDetail;
import java.awt.Color;
import java.util.List;

import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Alone
 */
public class MyOrder extends javax.swing.JFrame {
    private Home home; // Tham chiếu tới Home
    /**
     * Creates new form MyOrder
     */
    public MyOrder(Home home) {
        this.home = home;
        initComponents();
        setLocationRelativeTo(null);
        int userId = UsersDAO.currentUser.getUserId();
        loadOrderList(userId);

        // Thêm sự kiện khi chọn orderId từ ComboBox
        OrderList.addActionListener(e -> {
            String selectedOrder = (String) OrderList.getSelectedItem();
            if (selectedOrder != null) {
                int orderId = Integer.parseInt(selectedOrder);
                loadOrderDetails(orderId);
            }
        });
        if (OrderList.getItemCount() > 0) {
            int firstOrderId = Integer.parseInt(OrderList.getItemAt(0));
            loadOrderDetails(firstOrderId);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        OrderList = new javax.swing.JComboBox<>();
        status = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        orderTable = new javax.swing.JTable();
        total = new javax.swing.JLabel();
        CancelButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        backBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        OrderList.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        OrderList.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Đơn hàng", " " }));
        OrderList.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        OrderList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OrderListActionPerformed(evt);
            }
        });

        status.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        status.setText("Trạng thái:");

        orderTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Món ăn", "Số lượng", "Giá tiền"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        orderTable.setRowHeight(30);
        jScrollPane2.setViewportView(orderTable);
        if (orderTable.getColumnModel().getColumnCount() > 0) {
            orderTable.getColumnModel().getColumn(0).setPreferredWidth(250);
            orderTable.getColumnModel().getColumn(1).setPreferredWidth(100);
            orderTable.getColumnModel().getColumn(2).setPreferredWidth(150);
        }

        total.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        total.setText("Thành tiền:");

        CancelButton.setBackground(new java.awt.Color(204, 0, 51));
        CancelButton.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        CancelButton.setForeground(new java.awt.Color(255, 255, 255));
        CancelButton.setText("Huỷ đơn");
        CancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CancelButtonActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 20)); // NOI18N
        jLabel1.setText("Đơn hàng của tôi");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel2.setText("Chọn đơn hàng:");

        backBtn.setBackground(new java.awt.Color(102, 153, 255));
        backBtn.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        backBtn.setForeground(new java.awt.Color(255, 255, 255));
        backBtn.setText("Quay lại");
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 970, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(149, 149, 149)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(OrderList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(status)
                        .addGap(104, 104, 104))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(total)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(CancelButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(backBtn)
                        .addContainerGap())))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(0, 19, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(OrderList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(status, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(11, 11, 11)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 493, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(CancelButton, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(backBtn)
                    .addComponent(total))
                .addGap(8, 8, 8))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    
    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
        home.setVisible(true);
    }//GEN-LAST:event_backBtnActionPerformed

    private void CancelButtonActionPerformed(java.awt.event.ActionEvent evt) {
        // Lấy orderId từ danh sách
        String selectedOrder = (String) OrderList.getSelectedItem();
        if (selectedOrder == null) {
            return;
        }

        int orderId = Integer.parseInt(selectedOrder);

        // Kiểm tra trạng thái đơn hàng
        String orderStatus = OrderDetailDAO.getOrderStatus(orderId);

        if ("Đã hủy".equals(orderStatus)) {
            javax.swing.JOptionPane.showMessageDialog(this, "Đơn hàng đã bị hủy trước đó!", "Thông báo",
                    javax.swing.JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        // Chỉ cho phép hủy đơn khi đơn hàng ở trạng thái "pending"
        if (!"pending".equals(orderStatus)) { // Kiểm tra nếu không phải trạng thái pending
            javax.swing.JOptionPane.showMessageDialog(this, "Chỉ có thể hủy đơn hàng khi đang chờ xác nhận!", 
                    "Không thể hủy", javax.swing.JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        // Xác nhận từ người dùng
        int confirm = javax.swing.JOptionPane.showConfirmDialog(this, "Bạn có chắc chắn muốn hủy đơn hàng này?",
                "Xác nhận hủy", javax.swing.JOptionPane.YES_NO_OPTION);
        if (confirm != javax.swing.JOptionPane.YES_OPTION) {
            return;
        }

        // Cập nhật trạng thái đơn hàng thành "Đã hủy"
        boolean success = OrderDetailDAO.cancelOrder(orderId);

        if (success) {
            javax.swing.JOptionPane.showMessageDialog(this, "Hủy đơn hàng thành công!", "Thành công",
                    javax.swing.JOptionPane.INFORMATION_MESSAGE);

            // 🟢 Cập nhật trạng thái trên giao diện
            status.setText("Trạng thái: Đã hủy");

            // 🟢 Cập nhật tổng tiền về 0
            total.setText("Thành tiền: 0 VND");

            // 🟢 Xóa dữ liệu trong bảng
            DefaultTableModel model = (DefaultTableModel) orderTable.getModel();
            model.setRowCount(0);
        } else {
            javax.swing.JOptionPane.showMessageDialog(this, "Hủy đơn hàng thất bại!", "Lỗi",
                    javax.swing.JOptionPane.ERROR_MESSAGE);
        }
    }

    // GEN-LAST:event_CancelButtonActionPerformed

    private void OrderListActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_OrderListActionPerformed
        // TODO add your handling code here:
    }// GEN-LAST:event_OrderListActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        // <editor-fold defaultstate="collapsed" desc=" Look and feel setting code
        // (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the default
         * look and feel.
         * For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MyOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MyOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MyOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MyOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        // </editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MyOrder(new Home()).setVisible(true);
            }
        });
    }
    public void refreshOrderList() {
        int userId = UsersDAO.currentUser.getUserId(); // Lấy ID người dùng hiện tại
        loadOrderList(userId); // Tải lại danh sách đơn hàng
    }

    private void loadOrderDetails(int orderId) {
        DefaultTableModel model = (DefaultTableModel) orderTable.getModel();
        model.setRowCount(0); // Xóa dữ liệu cũ
        double sum = 0;

        List<OrderDetail> orderDetails = OrderDetailDAO.getOrderDetailsByOrderId(orderId);
        for (OrderDetail detail : orderDetails) {
            model.addRow(new Object[] {
                    detail.getProductName(), // Hiển thị tên món ăn
                    detail.getQuantity(), // Hiển thị số lượng
                    detail.getUnitPrice() // Hiển thị giá tiền
            });
            sum+=detail.getQuantity()*detail.getUnitPrice();
        }
        total.setText("Tổng tiền: " + String.format("%,.0f", sum) + " VND"); // Hiển thị tổng tiền có dấu phẩy

        // Lấy trạng thái đơn hàng từ DB
        String orderStatus = OrderDetailDAO.getOrderStatus(orderId);
        String statusText = "";
        Color statusColor = Color.BLACK; // Màu mặc định

        switch (orderStatus) {
            case "pending":
                statusText = "Đang chờ xác nhận";
                statusColor = Color.ORANGE;
                break;
            case "confirmed":
                statusText = "Đã xác nhận";
                statusColor = new Color(0, 153, 255); // Màu xanh dương nhạt
                break;
            case "preparing":
                statusText = "Đang chuẩn bị";
                statusColor = new Color(255, 140, 0); // Màu cam
                break;
            case "delivering":
                statusText = "Đang giao hàng";
                statusColor = new Color(0, 204, 0); // Màu xanh lá cây
                break;
            case "completed":
                statusText = "Hoàn thành";
                statusColor = Color.BLUE;
                break;
            case "cancelled":
                statusText = "Đã hủy";
                statusColor = Color.RED;
                break;
            default:
                statusText = "Không xác định";
                statusColor = Color.GRAY;
                break;
        }

        status.setText("Trạng thái: " + statusText);
        status.setForeground(statusColor); // Đổi màu chữ trạng thái
    }

    private void loadOrderList(int userId) {
        OrderList.removeAllItems(); // Xóa danh sách cũ
        List<Integer> orderIds = OrderDetailDAO.getOrderIds(userId); // Lấy danh sách orderId của user

        for (Integer orderId : orderIds) {
            OrderList.addItem(String.valueOf(orderId)); // Thêm orderId vào ComboBox
        }

        // Nếu có ít nhất một đơn hàng, hiển thị chi tiết đơn đầu tiên
        if (OrderList.getItemCount() > 0) {
            loadOrderDetails(Integer.parseInt(OrderList.getItemAt(0)));
        }

        // Thêm sự kiện khi chọn order khác
        OrderList.addActionListener(e -> {
            String selectedOrder = (String) OrderList.getSelectedItem();
            if (selectedOrder != null) {
                int orderId = Integer.parseInt(selectedOrder); // Đúng cách
                loadOrderDetails(orderId);
            }
        });

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CancelButton;
    private javax.swing.JComboBox<String> OrderList;
    private javax.swing.JButton backBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable orderTable;
    private javax.swing.JLabel status;
    private javax.swing.JLabel total;
    // End of variables declaration//GEN-END:variables
}
